lxctrl =
{
    runtest = "false";   // or "false"
}


# set failsave-bma to true or false
# the device of the failover must not be the same as the
# device in bma.
bma =
{
    device = "/dev/ttyS0";
    input-log = "/home/georg/work/lxctrl/bma01-in.bin";
    failsave-bma = "false";
}

bma1 =
{
    device = "/dev/ttyS1";
    input-log = "/home/georg/work/lxctrl/bma02-in.bin";
    failsave-bma = "false";
}


CAN=
{
    baud=250000;
    device="can0";
    nodes = (
	{ node_nr=1; name="can01";}
    );
}


# ModuleType Kennung
# DO721      0x06          8 Digitale Ein- und Ausgänge
# DI439      0x0D          8 Digitale Ein- und Ausgänge

can01=
{
  modules=(
      { type="DO721" },     # can01.di[0-7], can01.do[0-7]
      { type="DI439" })
}

# Signale
# Jedes Signal welches in der Software verwendet wird muss definiert werden.
# Es wird jeweils eine Zuordung SignalName <-> Ausgang getroffen.
#
# Es stehen 99 interne Signale zur verfügung. Durch den Eintrag .. map="intern.sig[99]"
# wird ein Signal auf diesen Eintrag gemaped.
#

SIGNAL = (
    { name="inHausAlarm";           map="can01.di[0]";   },
    { name="ISDNBusStoerung";       map="intern.sig[1]"; },
    { name="BmaAkkuFehler";         map="intern.sig[2]"; },
    { name="inRaiseAlarm";          map="can01.di[1]";   },
    { name="inTEST";                map="intern.sig[4]"; },
    { name="BmzComOneOffline";      map="intern.sig[5]"; },
    { name="outSigHausalarm";       map="can01.do[0]";   },
    { name="outSigStörungsalarm";   map="intern.sig[7]"; },
    { name="outSigFehlendeRoutine"; map="intern.sig[8]"; },
    { name="inOvdUp";		    map="intern.sig[9]"; },
    { name="inOvdDown";		    map="intern.sig[10]"; },
    { name="outSigOvd00";	    map="intern.sig[18]"; },
    { name="outSigOvd01";	    map="intern.sig[11]"; },
    { name="outSigOvd02";	    map="intern.sig[12]"; },
    { name="outSigOvd03";	    map="intern.sig[13]"; },
    { name="outSigOvd04";	    map="intern.sig[14]"; },
    { name="outSigOvd05";	    map="intern.sig[15]"; },
    { name="outSigOvd06";	    map="intern.sig[16]"; },
    { name="outSigOvd07";	    map="intern.sig[17]"; },
    { name="outRaiseAlarm001";	    map="intern.sig[19]"; },
    { name="outRaiseAlarm002";	    map="intern.sig[20]"; },
    { name="outRaiseAlarm003";	    map="intern.sig[21]"; },
    { name="inTest";		    map="can01.do[1]"; }
);

#
# verbindet eine Taste mit einem Signal Eingang. Funktioniert nur wenn nicht als
# Service gestartet wurde
#
SIMULATE = (
    { key="a"; signal="inOvdUp"; },
    { key="t"; signal="inTest"; }
);

#
# Datenbankverbindung - wenn die Tabellen nicht existieren braucht der User
# auch create Rechte. Schema Name ist lxctrl
#
db=
{
    schema="lxctrl";
    user="lxctrl";
    pwd="lxctrl";
}

# alle alarm Ausgänge
# minimal delay 250ms (Zykluszeit)
AlarmOutput=(
    { name="dummy";  sigRaise="outRaiseAlarm001";  tDelayOn=100; tOn=250; },
    { name="ALO_001";  sigRaise="outRaiseAlarm001";  tDelayOn=100; tOn=250; },
    { name="ALO_002";  sigRaise="outRaiseAlarm002";  tDelayOn=100; tOn=250; },
    { name="ALO_003";  sigRaise="outRaiseAlarm003";  tDelayOn=100; tOn=250; }
);


#
# Ein Alarm verknüpft n Alarmausgänge mit einem Signal und einer Id die beim Auftreten
# in die Log Datei geschrieben wird. Wie bei Signalen müssen alle Alarme die in der
# Software verwendet werden hier definiert werden.
#
# ToDo Eventuell Auslagerung in eigene Datei
#
FehlendeRoutine =
{
    id=2001;
    signal="outSigHausalarm";
    text = "Fehlende Routine";
    outputs=(
             {output="ALO_001"; delay=10;}
               );
}

Skript1 =
{

    exec = "sendmail.sh ${Title} ${Content}";
}

Stoerungsalarm =
{
    id=2002;
    signal="outSigHausalarm";
    text="Störung %s";
    outputs=(
             {output="ALO_001"; delay=10;}
               );
    script="Skript1";
}

Hausalarm =
{
    id=2002;
    signal="outSigHausalarm";
    text="Hausalarm %s";
    outputs=(
             {output="ALO_001"; delay=10;}
               );
}

Gruppenalarm =
{
    id=2002;
    signal="outSigHausalarm";
    text="Gruppenalarm %s";
    outputs=(
             {output="ALO_001"; delay=10; grp=0},
             {output="ALO_002"; delay=10; grp=0},
             {output="ALO_003"; delay=10; grp=0}
               );
}



